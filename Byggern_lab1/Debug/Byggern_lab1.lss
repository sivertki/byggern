
Byggern_lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000070  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002aa  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000212  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000a2d  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000008c  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000e02b  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000040  00000000  00000000  0000f153  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  0000350d  00000000  00000000  0000f193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	37 c0       	rjmp	.+110    	; 0x70 <__ctors_end>
   2:	00 00       	nop
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	00 00       	nop
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	00 00       	nop
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	00 00       	nop
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	00 00       	nop
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	00 00       	nop
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	00 00       	nop
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	00 00       	nop
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	00 00       	nop
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	00 00       	nop
  34:	25 c0       	rjmp	.+74     	; 0x80 <__bad_interrupt>
  36:	00 00       	nop
  38:	23 c0       	rjmp	.+70     	; 0x80 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	21 c0       	rjmp	.+66     	; 0x80 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1f c0       	rjmp	.+62     	; 0x80 <__bad_interrupt>
  42:	00 00       	nop
  44:	1d c0       	rjmp	.+58     	; 0x80 <__bad_interrupt>
  46:	00 00       	nop
  48:	1b c0       	rjmp	.+54     	; 0x80 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	19 c0       	rjmp	.+50     	; 0x80 <__bad_interrupt>
  4e:	00 00       	nop
  50:	17 c0       	rjmp	.+46     	; 0x80 <__bad_interrupt>
  52:	00 00       	nop
  54:	15 c0       	rjmp	.+42     	; 0x80 <__bad_interrupt>
  56:	00 00       	nop
  58:	13 c0       	rjmp	.+38     	; 0x80 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	11 c0       	rjmp	.+34     	; 0x80 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0f c0       	rjmp	.+30     	; 0x80 <__bad_interrupt>
  62:	00 00       	nop
  64:	0d c0       	rjmp	.+26     	; 0x80 <__bad_interrupt>
  66:	00 00       	nop
  68:	0b c0       	rjmp	.+22     	; 0x80 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	09 c0       	rjmp	.+18     	; 0x80 <__bad_interrupt>
	...

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0f d0       	rcall	.+30     	; 0x9c <main>
  7e:	1c c0       	rjmp	.+56     	; 0xb8 <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <USART_Init>:
#include "UARTDriver.h"


void USART_Init (void) {
	// Set baud rate 
	UBRR0H = (unsigned char) (MYUBRR >> 8);
  82:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char) MYUBRR;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	89 b9       	out	0x09, r24	; 9
	
	// enable receiver and transmitter
	UCSR0B = (1 << RXEN0 ) | (1 << TXEN0);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	8a b9       	out	0x0a, r24	; 10
	
	// set frame format: 8 data, 2 stop bit
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
  8c:	8e e8       	ldi	r24, 0x8E	; 142
  8e:	80 bd       	out	0x20, r24	; 32
  90:	08 95       	ret

00000092 <USART_transmit>:
}


void USART_transmit(unsigned char data){
	// Wait for empty transmit buffer
	while ( !(UCSR0A & (1<<UDRE0)) );
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <USART_transmit>
	
	// Put data into buffer, sends the data
	UDR0 = data;
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  9a:	08 95       	ret

0000009c <main>:

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).

	board_init();
  9c:	fe df       	rcall	.-4      	; 0x9a <board_init>
	
	unsigned char letter = '4';
	
	USART_Init();
  9e:	f1 df       	rcall	.-30     	; 0x82 <USART_Init>
	
	while(1) {
		
		USART_transmit(letter);
  a0:	84 e3       	ldi	r24, 0x34	; 52
  a2:	f7 df       	rcall	.-18     	; 0x92 <USART_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	9e e0       	ldi	r25, 0x0E	; 14
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0xe>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x18>
  b4:	00 00       	nop
  b6:	f4 cf       	rjmp	.-24     	; 0xa0 <main+0x4>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
